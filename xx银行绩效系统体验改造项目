目前状况
民生银行原绩效系统，采用JSP+IFRAME框架做前端展示；基本采用较为原始的瘦客户端方式设计，使用DIV+CSS布局，操作体验上较有局限性。
目前体验改造项目，希望在原有业务框架的基础上，通过技术实现上的改造，以实现操作体验上，以及代码规范、可维护性上有所提高。
项目开始之后，项目组选择bootstrap的CSS框架，配合HTML+javascript编程实现前端展现；同时配合sitemesh框架的页面整合技术，实现页面的静态整合。
其特点主要是，编程上，仍然以完整单个的jsp页面编程为基础；界面展示上，能够将功能界面与整体菜单界面整合为统一的html页面，不存在跨域（跨iframe）的情况。界面极为轻量；但所有请求界面输出都是整体页面，也就是说，每次提交跳转均需要整个页面刷新，体验较差；服务端的页面编译压力也较大；另外由于界面是整体拼接，js函数调用上较为杂乱。
期望
基于以上情况，客户希望能够提出解决方案：1、界面跳转尽量局部化，也就是AJAX化；2、希望在代码编写上能够有较好的规范性和可积累性；3、希望新的规范不要在既存代码上有较大改动工作。
方案
基于以上原则，提出以下建议方案：
1、	采用JS+HTML单独编写首页菜单框架，控制菜单功能的调入；功能页面采用iframe单独加载。
2、	采用JS+HTML编写整体页面框架，并选择接入类似YUI的瘦客户端AJAX框架，将完整的功能界面代码转化为HTML片段，嵌入整体界面来控制功能代码载入。
以上两种方式，均可以做到沿用目前的bootstrap css框架，保证UI风格不变；代码编写上，功能代码在开发上能够隔离，且沿用大部分的前后端代码；基本上都能够保证主流浏览器的兼容。
对比
方案1，优点：框架改造较为简单，功能代码，尤其是javascript代码在运行过程中能够得到有效隔离；可以添加多功能的页签功能；前端内存上能够通过iframe有较好的控制。缺点：功能内部代码想要调用父页面函数较为困难，存在跨域调用的可能；单个功能内需要单独载入js库以及css样式文件。
方案2，优点：界面较为轻量；整个页面拼接为单一的html页面，且能够实现局部刷新；功能点内部可以直接调用整体的页面的js函数与css样式，js函数和样式文件不需要多次载入；缺点：功能代码做为片段嵌入整体DOM文档，容易出现冲突，尤其js代码，可能存在内存清理上的缺陷；功能代码上的缺陷，可能会影响到整体页面或者后续页面的调用；框架较为陈旧，AJAX返回DOM片段，需要单独添加数据请求的AJAX对象。
基于目前项目情况，以及是内网管理系统，本人建议采用方案1，代码管理及开发上，较易理解。目前行内大部分采用IE8的情况下，对于iframe框架的支持，也比较好。
