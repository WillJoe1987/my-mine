1、	Wlj-frame-function-flow.js，这个应该是操作指引（流程指引？）的未完成版本，能否简单给我讲解一下您实现的思路，以及后续如果需要完善，大致方向？

操作功能的流程化，是一个比较大的课题，更多的是业务上的梳理和总结；而之于框架本身，所需要考虑的问题无非几点：
A、	流程化的东西的嵌入性。也就是它并不是我们框架的核心功能，那么就存在有些项目需要，而有些项目不需要；那么它的所有代码一定要在框架之外，可以保证干净地拆卸与安装；
B、	UI（用户接口）实现。作为独立子系统，其并不面向开发人员提供开发接口，所有可运行功能逻辑均应该由插件自身组织执行；只对用户、配置人员提供配置功能（配置页面，或者JSON文件）。
C、	这份初步代码，是基于菜单功能的流转，和功能内部运行状态数据化的方式组织的。可以做到完全不影响功能开发代码，但是可能实现上就会有些难度。如果要完全以原子化弹出窗口组织，可能会对开发模式有较大影响，导致开发上手和版本管理难度的提高。


2、	Wlj.frame.functions.app.widgets.View.js，这个文件中assistantView的作用是什么？目前看了，好像并没有用到，不太明白。

assistantView是一个辅助面板的作用，其在初始化的时候，上下文为当前弹出面板，及其所加载的数据行。其配置、调用项均与customerView相同。
作为辅助面板，assistantView旨在为当前的面板提供一个扩展的关联数据、关联功能的容器，该容器行为会受控于当前展示的面板。比如，你可以自己做一个测试，将公告中的附件列表放到相应的辅助面板中，可能提供的操作体验会有所不同。


3、	Wlj-frame-function-header.js ，fields中cellJointable属性配置说明是否错误，应该是jointable。

没错。


4、	表头锁定列，会造成合并列位置存在严重错位，如： 目前公管管理，“阅读标记”与“重要程度”分别是合并列，若锁定其中间的公告标题，即会造成表格合并列严重错位。
这个问题由你和王印合作解决。

单元格合并的功能设计尚未完结，目前仅仅实现了单列的纵向单元格的合并。基本的实现原理是在数据渲染结束后，在单元格上添加浮动的合并单元格进行覆盖展示。尚未完结的部分，在该补丁文件中，有明确说明，参见：http://192.168.254.103/svn/yccrm-code/trunk/developer/CRMV4.7/patch/PATCH-v4.7.20160722-1/readme-v4.7.20160722-1.txt
	后续待完善功能：
	1、单元格合并的级联特性。目前单元格合并仅限于各列分别计算；
	2、合并后的单元格数据拖动、鼠标悬停、数据行选择功能尚未添加；
	3、尚未添加任何事件开发接口支持；
	4、横向合并的必要性和可能性；
	5、已合并的列当前不可锁定，锁定列当前也不可合并，关于数据列锁定与数据单元格合并功能的适配在后续更新中完善；
	6、目前，如列表中存在合并字段，则只有合并字段可通过点击表头排序；如不存在合并字段，则所有字段可排序。合并字段与排序功能待后续完善；

	
5、	关于目前新增、修改、详情、customerViews 中配置的面板，如何配置，才能使其通过Ext.window方式打开，是否需要补丁什么的，目前产品版本中是否已包含补丁。

东方资产项目有一套实现，但我并没有考虑过加到主干版本。弹出窗口式的面板展示与一些配置项和既有的操作（如，数据点选等）有一定理念上的冲突；而且，弹出式窗口层次感不很明确，所以，我一直没有考虑过。
如果，你们想要添加进来，那么，几点建议：
1、	保证所有的事件、属性、API的调用不变且有效；
2、	不用使用源生EXT.WINDOW对象，最好采用原有的VIEW对象添加判断逻辑实现。


6、	多表头配置，能否提供一份示例代码。

多表头内容参看绩效产品实现；这一部分功能主要也是应绩效产品需求而添加的。


7、	thumbnails 缩略图，略缩图窗口对象，* TODO 尚待完善：UI优化,略缩窗口的隐藏时机。关于TODO 部分有没有好的建议。

插件系统的功能与前面flow子系统的设计相类似，原则上保证：1、功能代码的嵌入式特性；2、保证优秀的操作、配置体验；3、保证对开发体验无影响。
由于这类功能这类功能逻辑均是自组织自运行的，不涉及开发，所以，这些功能的设计与开发可以完全按照用于体验的需求和发展来斟酌研发，可参考的内容就多了很多，操作系统、智能手机、网络游戏、互联网体验等等。


8、	前端设计器designer，是否还需要继续完善，以及是否有一些好的想法。

设计器的功能考虑两点即可：1、操作体验；2、功能跟随开发接口的变化而更新。


9、	功能静态DEMO部分，是否还有一些需要完善的地方？或者好的想法。

静态DEMO的功能其实比较鸡肋了。可以考虑用嵌入式容器（jetty等），或者类似nodejs之类的轻量级容器代替，防止类似google等浏览器的安全模型变化，导致功能运行出现问题。


这套框架中，所有可能涉及到开发接口发生变化的功能，称之为核心功能，如最近更新的一系列查询结果列表的更新变动；而插件、设计器、流程化等，可以称之为外围功能，这些功能不会涉及到开发体验的变化。
设计核心功能的时候，优先考虑以下几点：
1、	开发体验；能够复用之前开发接口的，复用之前的开发接口；提供出来的开发接口要精而少，开发结构也尽量要求简单；开发接口要考虑配置项、API、事件化的嵌入式逻辑；
2、	配置体验；各种功能的开关、不通逻辑的选择、公共配置文件、公共补丁文件等等；
3、	操作体验；是否设计后台存储；这个框架中大量使用的拖动、右键操作是否满足；
4、	性能效率；
而对于外围功能，主要考虑以下几点：
1、	代码的装载与卸载，要不影响任何主体功能；
2、	是否需要提供配置的UI界面，是否需要提供管理员或者项目架构的统一配置项；
