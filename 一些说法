
所谓微服务，从整个IT发展来看微服务的概念，是分布式体系发展的一个基石性概念，或者算是一个前奏性的铺垫。那些基于互联网业务的IT巨头正在逐步使用这些概念整合整体IT从业者的心智。从宏观角度来看，它的发展结果就是从IT互联角度整合实体经济。

什么微服务也好、分布式也好、SOA也好，这些从互联网企业过来的概念，已经不是一个简单的技术性概念。他的运行、部署、迭代，基本上都直接决定于其顶层业务架构。

随口说两句，会上的讨论实在是没有什么有营养的内容，所以，会上有些不耐烦。简要列一点想法，以后有机会详细阐述。我觉得，研发中心要希望能够做出一些东西，当务之急无非几点：1、能够运营，或者模拟运营，或者为实施项目提供模拟条件，说白了，先把项目都拿过来，跑起来；2、组织开源管理委员会，以开源包的方式发布开源项目，既能吸收散落的人员心智，又能测试研发出的内容的可行性。

特点：
1、	与核心业务架构相关；
2、	核心理念在于进化；没有定型，所谓的松耦合、原子化、微服务什么的概念，都只是表象。
3、	没有运营就没有进化，也就没有架构。
难点：
1、	迭代过程中的代码、接口、通信、层级等等往往很难在规模上收敛；这个问题又往往由于调用关系的复杂，导致版本的不断冗余造成的；
2、	每个服务的上下文都是系统整体，不可复制，传统的测试策略无法生效；
输出企业：
1、	企业一定有自己成熟的业务体系，才能支撑所谓技术架构的进化；依赖，是反向的；
2、	企业一般都有开源管理委员会，用于开源发布进化迭代过程中，沉淀下来的一些部件。而开源出来的这些东西，作用在于整合外部测试资源、外部心智资源、以及广告。
研发中心策略：
1、	产品最核心的能力在于版本管理；
2、	异构集成能力；
3、	远端测试，容器常在；分布式开发框架的开发环境，也应该是分布式的；中央式的完整运行实例和区隔化的挡板实例，让本地IDE中的内容能与分布式环境对接。
4、	运行能力，需要必要的机制，形成各个项目版本的影子实例；结合现在DOCER技术，应该是颇为容易可以实现；
5、	压缩与抽象能力；让服务与层级的规模曲线，在不同开发者手中，或者在单一项目中往往不容易收敛，而研发中心在宏观层面对面多项目，可以有更高的视角进行抽象，把整个曲线变为波动收敛曲线；微服务的横向拓扑能力很强，但是纵向层级拓扑却极少有人能精通，且往往与业务模式挂钩，也只有研发中心这样的角色能够有所提炼；
6、	建设开源委，整合各个项目的心智，以开源包的方式发布模块性项目，项目组可以做自己的分支实现，产品本身的版本滚动变为所有项目的整合；把所有的人员组成一个真正意义上的分布式系统；
7、	层级在结晶到一定程度的时候，对外开源部件。
会议的一些内容：
1、	EMP与BSP之争，只是一个逻辑代理，研发中心要做的就是把集成工艺都放进来；
2、	循环贷的编排什么的，是临时性的一种沉淀，无非是逻辑持久化为配置而已，和EMP没有本质区别，事实上，最后的形式也会持久化为数据，并在内存或者缓存中运行，逐步形成逻辑动态下发；再好一些，就是一些智能式的蔓延发布了，灰度发布之类的，其实都有些落伍了；
3、	什么注解使用的包名不对；完全无所谓，在架构上，只要是用的java就有办法在完全不侵入代码的情况下，完成逻辑的替换，怎么写都行。
目前的一些问题：
1、	循环贷目前遇到的原子服务、通讯接口的版本爆炸；待解决，抽象沉淀能力；
2、	依赖问题：采用第三方的接口托管系统，解决依赖、接口和测试问题；
3、	分布式的事务问题，尤其与多方外部接口交互的情况下，无法控制外部系统，那么，系统内部的业务一致性、与熔断性功能；
4、	发布能力！！！
