工作一年，刚毕业的时候，才被折磨地死去活来。才毕业三个月，就被委以重任。要做一个一键化的ETL工具。
包括：数据分布分析，PDM模型转Mapping文件，Mapping文件转KETTLE文件，KETTLE文件转PRO*C文件，之后编译执行。
一个星期，最后高出一个40万行的main函数，倒是还编译执行成功了。


之后大约作实施项目的开发，大约将近两年。之后进入产品不，维护数据应用产品的应用架构。工作三到四年的时候，做前段开发框架，不同于以往任何js的开发框架。
之后两三年，推广了近百个项目，平均项目额近百万，整体收入近亿。听来颇有些辉煌。到现在，还有队伍维护，还在跑。

这个框架在js中做了一个类似于java虚拟机的环境，用于跑开发者的业务逻辑。它的成功在于已开始，透彻的研究了实施体系业务，把任何参与者都当作客户，考虑在内。
整个实施业务体系、框架代码、产品研发、售前体系、实施团队都算在内，形成一个真正的架构体系。

其实任何产品的核心，在于其对于参与者的友好性。对于订制实施产品而言，其客户包括：框架维护者、产品研发者、售前业务人员、版本管控人员、实施项目组应用架构师、
实施项目组开发者、客户方业务人员、客户方管理者、终端用户。

实施项目的需要考虑交付，整体控制；终端用户要考虑使用体验；售前人员需要灵活调整与让人耳目一新的界面；
产品研发和框架维护者希望能够撇清项目业务代码而作一些更通盘性的功能，同时又能够更好地推广自己的产品。

全拖动、有键体系功能，把BS的界面尽量模拟操作系统体验，应对终端用户与售前人员的展示；各级别的配置文件（包括框架级别和功能级别）和自定义补丁文件，
保证项目应用架构的整体控制，以及应急性质的个性逻辑；可枚举的面向句柄开发接口以及扁平化的全局API， 保证框架和业务逻辑的完全隔离，保证开发体验以及产品版本
的顺利下发！

其中，面向句柄的开发模式，是基于大量实施业务的总结与抽象，让实施开发人员更专注业务的应对，同时对于项目组功能性质的创新思维，不得不与产品部交互，获得支持。
这样，产品就从某种更为合理的情况下收集、吸收基于一线项目的创新。同时产品的功能性质的产品又是基于产品级别，面向所有实施项目开发，更容易地将产品的创新结果下
发给项目组。


===========================================================================================
我们花了那么久，才发现作平台，基于流量的形式发展。然而，在队伍内部又开始分包做项目。好像，玩头又不怎么大了。

分包获奖，就会产生竞争、竞争产生分化，然后就开始小团体，关键，还是竞争性的小团体。做事情，那奖励，然后再去做其它事情？这些事情在未来产生了副作用的时候，
又能不能把奖励拿回来呢？这样的思路，有会培养出接项目，做交付的思路。为什么不走流量性质的奖励呢？

其实我们的队伍，本拉就对于自运营，自成长平台的文化不甚熟悉。又何不在产品内部执行起来呢。基于流量执行奖励，也会形成小团队，但每个小团队都会清楚，
做的事情是不断迭代不断成长的，不断地跑着流量的东西；不同的团队又会形成合作，合作好，承担多，流量多。合作不好的，可能流量就渐渐减少，也就慢慢被淘汰。

奖励的目标在于激励，可激励不能不考虑副作用。基于长远，奖励作为一个管理与文化传播的方式，也能够对产品（代码、业务、团队）形成好的刺激和引导，才是作为一个
领导者和管理者所需要形成的考虑的事情。

多为者多得。这里的多为，不是你吭哧吭哧码了多少内容，而应该是你做出的东西，为客户做了多少事情！换一句话，就是用流量来衡量！你的功能的性能指标、健壮性都
会影响到你的收入，你的产品的研发、迭代、成长能力，决定了你的收入的成长性和持久性！也就是说，你的做的事情所产生的问题，都会影响你的收入，也就形成了惩罚。
